# Redis

Download : https://redis.io/download

Windows : https://www.youtube.com/watch?v=_nFwPTHOMIY

Redis est open source qui peut servir de Database/cache system & message broker avec un principe de key/value. Redis supporte enormement de Data Structure et a des built in replications avec un principe de Master/slave qui a une synchronisation asynchrone pour permettre au master de continuer de fonctionner pendant les synchronisations.

Redis est utilisable avec énormement de language (C#, C, C++, Java, PHP, Node.js, Lua, Python, Ruby, GO, perl, Bash,...)

##Présentation

### Redis DataType 

* String
* List (List des strings)
* Sets (unorder collection of strings)
* Sorted Sets (Non repeating collection of strings)
* Hashes (Key/value)
* Bitmaps
* Hyperlogs
* Geospatial index

### Avantage de Redis

* Tres flexibles
* No schemas / No columns Names (NoSQL)
* Very fast (110k Sets/s & 80k gets/s)
* Rich data Supports
* Caching & Disk Persistence (Mélange entre mangoDB et menCache)

### Redis Security   

Il y a des fonctionnalités de sécurité mais Redis est fait pour être utilisé uniquement par des clients autorisés:

* Ne permet pas d'accès externe
* Simple authentification peut être mis en place
* Restriction à certaines interfaces
* Data Encyrption pas possible

## Installation (Linux)

il s'installe avec soit un tar.gz sur leur site soit avec apt-get install redis-server. Pour une installation clean, ne pas oublier de faire un sudo apt-get update & sudo apt-get upgrade.

Il peut être bien de faire un backup du fichier config avant de faire des modifications, il est à cet endroit : /etc/redis/redis.conf

Si l'installation se passe bien, redis-cli devrait premettre de taper des commandes Redis

Exemple :

```
src/redis-cli
redis> set foo bar
OK
redis> get foo
"bar"
```

## Redis Commande

* Get/set pour set ou get des variables
* Incr/decr pour incrémenter/décrementer
* del pour supprimer
* exists pour savori si une valeur est renseignée (1 = oui / 0 = non)
* flushall pour tout reset
* expire [name] X pour mettre un temps d'expiration en secondes
* persist pour enlever le temps d'expiration
* TTL [name] pour le temps restant à vivre (-2 = expiré)
* Mset key1 val1 key2 val2 pour set up plusieurs values
* append pour append
* rename pour rename

On peut faire des set sepécifiques comme server:name & server:port. 

On peut ajouter l'experiation pendant le set avec : Setex test X "hello"

