# NMAP

Liste script : https://nmap.org/nsedoc/


Pour avoir une idée de l'état de sécurité d'un site (une ou plusieurs IP), il faut commencer à comprendre son environnement. C'est à dire les services qui s'executent sur la cible. Certains peuvent etre un webserveur, d'autres un Controller de domaine d'Active Directory. Le début est donc d'établir une map de ce paysage et c'est le principe de "Port Scanning"

Les ports sont nécessaires pour faire plusieurs requetes réseau ou d'avoir plusieurs services. C'est ce qui permet d'avoir plusieurs onglets par exemple et de diriger le traffic vers le service approprié (donc un service pour un port, car le service va "listen" le port). La connection se fait donc entre un port qui est écouté et un port aléatoire de l'ordinateur emetteur.

image::https://i.imgur.com/3XAfRpI.png[Port_Management]

Tous les ordinateurs ont 65535 ports disponibles ce qui permet d'avoir beaucoup de service, cependant beaucoup de ces prots sont enregistrés en tant que ports standard, parce que exemple, le webservice HTTP est le 80 par défaut, tandis que le HTTPS est le 443. Dans certains cas, il est possible que ces ports soient alterés. C'est pour cela qu'il est improtant de récupérer ces informations lors d'une analyse. Port connus :

* 53 : DNS
* 80 : HTTP
* 443 : HTTPS
* 139 : Windows NETBIOS
* 445: SMB

Mais aussi par catégorie:

* 0 à 1023 sont pour les protocoles TCP/IP (donc 1024 ports)

## Port Scanning

Pour effectuer un Port Scanning, il y a plusieurs façons de faire. Un outil très connu est Nmap qui permet de faire plusieurs types de port scan. La façon est basique est de se connecter à chaque port du destinataire et determine en fonction de la réponse si le port est ouvet/fermé ou filtré (firewall).

Une fois que les ports sont connus, on peut regarder quels services sont associés à quels ports (manuellement ou avec nmap). Nmap est actuellement le standard dans l'industry car c'est un outil très puissant, très rapide et avec veaucoup de fonctionnalité. Il dispose aussi d'un scripting engine qui permet de scan pour des vulnérabilités et voir même de tester des exploits sur ces vulnérabilités

## Nmap Switches

Nmap n'est pas installé par défaut (sauf Kali Linux) et on y accède avec "nmap". Voici la liste des switches utiles:

Aide

* -h pour help
* man nmap

Scan: 

* -sS pour un Syn Scan
* -sU pour un UDP Scan
* -sV pour scan les services (version + infos des services qui s'executent sur la target)

Parametre de Scan

* -TX (T1 à T5) permet de changer le timing du template (Plus haut = Plus rapide)
* -p 80 pour ne scan que le port 80
* -p1000-1500 pour scan une range de port (espace ou non apres le p pas important)
* -p- permet de scan tous les ports
* --script pour activer les scripts et on ajoute la catégorie apres => --script=default OU --script=vuln

Extra informations

* -O pour avoir l'OS de la machine
* -A permet d'activer l'OS detecction, version detection, script scanning et traceroute (A => Aggresive donc si besoin d'etre discret nul, mais bien pour audit)
* -v pour verbose
* -vv pour encore plus de verboe

Output

* -oA permet d'enregistrer un scan pour éviter de le refaire et de spam le réseau (et d'etre detecté)
* -oN output le scan en Normal
* -oX output le scan en XML
* -oS en script Kiddie
* -oG en Grepable format


## Les differents scans

Les scans basiques sont :

* -sT pour les TCP connect Scan
* -sS pour les SYN half opens scan
* -sU pour les UDP scans

et il y aussi d'autres scans un peu moins utilsiés qui sont :

* -sN pour les TCP Null scans
* -sF pour les TCP Fin Scans
* -sX pour les TCP Xmas Scans

### TCP Connect Scans (-sT)

Info : https://datatracker.ietf.org/doc/html/rfc793

un TCP Connect scan s'effectue en effecutant un three-way handshake avec la cible sur chaque port et en fonction de la réponse, détermine si le port est ouvert. Si le por est fermé, la réponse ne sera pas un SYN/ACK mais un RST (pour Reset).

La derniere option est si le port est ouvert mais filtré par un firewall. Les firewalls sont configurés pour "drop" les packets non acceptés. Si la requete n'envoie rien, c'est que le port est protegé par un firewall.

Il est important de noter qu'on peut configurer les firewall pour répondre en RST au lieu d'ignorer la requete, ce qui limite la précision de la lecture des ports. Il y a une commande sur Linux qui permet de faire ça :

iptables -I INPUT -p tcp --dport <port> -j REJECT --reject-with tcp-reset

### Syn Scans (-sS)

les Syn Scans sont utilisés pour scan la range des prots TCP mais cela marche un peu différent des conect scans. Les Syn scans sont parfois referenciés en tant que "half-open" scans ou "stealth scans". C'est à dire au lieu de faire une handshake classique (SYN => SYN/ACK=> ACK), on renvoie un  RST (SYN => SYN/ACK => RST) pour faire croire que notre port est fermé

Cela a plusieurs avantages:

* Cela permet de bypass les anciens systemse de detections (Intrustion Detection System IDS) qui cherchent des handshake complet ( même si cela ne marche plus trop avec les IDS modernes)
* Ces scans sont souvent pas logs par les applications qu iécoutent les ports car on log que lorsque la connection est etabli
* Les scans n'ont besoin de faire un handshake entier + la deconnnection, donc c'est plus rapide que les TCP connect scan

Il y a aussi plusieurs desavantages:

* Il faut avoir la permission sudo pour l'executer car il ne marche pas correctement sur Linux puisque cela nécessite de faire des packets raw (root user only)
* Certains services (instables ou mal faits) peuvent crash à cause des SYN Scan ce qui peut être problématique quand on est sur des environneemnts de prod

De manière général, les Syn scans sont utilsiés par défaut sauf si on est pas en sudo et dans ce cas la, les scans tCP connect sont utilisés.

Le processus d'identification est identique par contre (Rst & Dropped)

### UDP Scan (-sU)

Les connections UDP sont statelesss, c'ezst à dire qu'il n'y a pas de back-and-forth. Les connections UDP envoient juste des données sans aucune verifications (gain de vitesse au lieu de qualité). Le problème c'est que comm il n'y a pas de réponse du serveur, cela rend les scans UDP plus lent et plus dur.

NMap envoie un paquet à un port, s'il n'y a pas de reponse, le port est Ouvert/filtre. S'il y a une réponse UDP, le port est ouvert (mais c'est tres rare). Quand il n'y a pas de réponse, on envoie un 2eme packet pour confirmer et s'il n'y a toujours pas de réponse, on valide que le port est ouvert/filtre.

Quand un packet est envoyé à un port UDP fermé, la cible doit repondre avec un packet ICMP (ping) avec le message que le port est fermé. 
 
Un Scan UDp est donc beaucoup plus lent (20mn pour scans les 1000 premiers ports avec une bonne connection) c'est pour cela qu'on scan uniquements les tops ports pour avoir des temps plus cours avec ce genre de commande :
  nmap -sU --top-ports 20 <target> (scan les 20 premiers top ports de la target)

Les packets sont en généralement vides sauf pour les ports qui sont occupés par des services connus pour avoir des réponses plus précises

### Scan NULL/FIn /Xmas

Ces scans sont moins coureux que les autres mais ils sont liés entre eux et sont plus discrets que l'autre contrepartie.

#### Scan NULL (-sN)

Les Nulls Scans sont quand les requetes TCP sont envoyés sans aucun flag.(C'est à dire les SYN/ACK/FIN/RST etc)

image::https://i.imgur.com/gIzKbEk.png[Flag_Exemple]

#### Fin Scans (-sF)

Clea marche quasiment pareil quie les Null scans sauf qu'un flag FIN est utilisé à la fin pour fermer correctement une connexion active.

#### Xmas Scan (-sX)

C'est une autre forme de scan qui oenvoie des packets TCP malformés et qui attendent RST pour les ports fermés. Cela s'appelle Xmas Scan parce que les flags utilisés (PSH, URG, FIN) donnent l'apparance d'un sapin de noel quand on capture le packet (dans wireshark par exemple)

Ces scans fonctionnement de manière très similaire à un Scan UDP. Si le port est ouvert, il n'y aura pas de réponse à un packet malformé. Si le port est protegé par un firewall, il n'y aura pas non plus de réponse. Ces scans peuvent donc seulement identifier les ports en tant que open|Filtered ou closed ou filtered. 

Certains e(Windows & Cisco devices) repondent en RST à tous les packets malformés que cel a soit ouvert, filtré ou non mais le but est d'éviter les firewalls qui sont configurés pour igrnoer les packets TCP qui ont des flags SYN (et donc bloquer les demandes de nouvelles conenexion). En évitant d'avoir les flag SYN, on évite ce comportement même si la plupart des IDS modernes prennent ce genre de scan en compte.


### ICMP Network Scanning (-sn)

Pour obtenir une map du réseau, un des premiers trucs à faire est d'obtenir les adresses IP avec des host actifs et ceux non. Pour cela, on utilise un "ping sweep". Nmap va envoyer un ICMP packet à toutes les adresses IP possibles du réseau et en fonction des réponses va catégoriser les  adresses IP (alives ou non).

Ce n'est pas toujours précis mais cela sert de base. Pour scan un ensemble d'IP, on utilise - ou /, ex :

* nmap -sn 192.168.0.1-254
* nmap -sn 192.168.0.0/24 (CIDR Notation, cela peut etre /24 poru classe A, /16 pour classe B, etc)

Cela va aussi envoyer un TCP SYN packet au 443 (HTTPS) et TCP ACK (ou TCP SYN si non root) au port 80 (HTTP).

## Scripting

NSE (Nmap Scripting Engine) permet d'etendre les fonctionnalités de Namp. Les scripts sont en LUA et cela petu faire enormement de choses comme scanner vulnerabilités et même les exploiter.

Il y a beaucoup de catégories, voici certaines utiles :

* Safe - Innofensif
* intrusive - Not safe et probable d'affecter la cible (pas en prod)
* vuln - Scan pour dfes vulnerabilités
* exploit - essaye d'exploiter une vulnerabilité
* auth - Essaye de bypass l'authentification pour des services (Log sur un FTP en anonymous)
* brute - essaye de bruteforce les crednetials
* discovery - questionne les services pour plus d'informations sur le réseau

### Utiliser des Scripts

On peut voitr dans les switchs, qu'il suffit d'ajotuer --script=[categorie], --script=vuln pour ajouter les vulnerabilités

Pour executer certains scripts spécifiques, on utilise cette syntaxe : --script=script-name ==> --script=http-fileupload-exploiter 

On peut aussi mettre plusieurs scripts avec des virgules ==> --script=smb-enum-users,smb-enum-shares

Pour ajotuer des arguments, on utilise --scripts-args, exemple

nmap -p 80 --script http-put --script-args http-put.url='/dav/shell.php',http-put.file='./shell.php'

Les arguments sont séparés par des virgules aussi


On peut aussi les fonctions helps pour plus d'informations sur les scripts comme :

nmap --script-help <script-name>

### Get Nmap scritps

La premiere soruce est le site en haut de ce document qui a tous les scripts officiels et la 2eme source sont des scripts customs sur sa machine qui sont stockés dans :

/usr/share/nmap/scripts

Il y al e fichier sciprt.db qui a la liste de tous les scripts (format text même si en .db). Nmap utilise ce fichier pour garder la liste et utiliser les scripts. On peut grep ce fichier pour trouver plus facilemetn certains scritps ex :

grep "ftp" /usr/share/nmap/scripts/script.db

Pour installer/ajouter/créer des scripts, il faut ajouter le script au bon endroit (si on prend un site du site officiel, on utilsie cette commande :

sudo wget -O /usr/share/nmap/scripts/<script-name>.nse https://svn.nmap.org/nmap/scripts/<script-name>.nse

Sinon, on met juste le script dans le bon dossier et apres on update le fichier script.db avec : 

nmap --script-updatedb

## Firewall Evasion
