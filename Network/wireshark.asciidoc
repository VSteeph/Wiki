# Wireshark

Installation : https://www.wireshark.org/download.html

Filter: https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html


## Overview

En ouvrant Wireshark, on voit la liste des réseaux et on peut appliquer des filtres pour limiter le traffic qu'on souhaite capturer. On choisit aussi si on veut faire une capture en direct ou charger des PCAP (Packet Capture)

Le Ribbon vert permet d'afficher une liste de filter disponible par défaut, ce qui permet de réduire le nombre de packets visible (important si on cherche quelque chosie pcq il peut en avoir beaucoup).

Une fois tout selectionné, on clique sur une interface pour commencer à écouter et récupérer tous les packets. On peut appuyer sur le bouton stop pour arrêter la récupération en direct et analyser le contenu.

## Organisation

Le tableau donne beaucoup d'informations :

* Numéro du packet
* Temps
* Source du packet
* Destination du packet
* Protocole utilisé
* Taille
* Info du packet

Wireshark utilise des codes couleurs pour définir le niveau de danger et trouver les anommalies rapidement (Vue => Coloring Rules). Par exemple, Rouge signifie que le port est fermé

image::https://i.imgur.com/Mt0eGs8.png[Wireshark_colorCode]

## Collection des Packets

Il y a plusieurs façons de créer un fichier PCAP et on va couvrir plusieurs des méthodes pour récupérer les informations pour collecter et surveiller la capture de packet en direct. Il y a plusieurs criteres de bases :

* Faire une capture de test pour voir que tout fonctionne bien et est bien configuré
* S'asurer qu'on a assez de puissance informatique pour tenir avec le nombre de packets
* Assez d'espacce disque pour tout enregistrer

### Networks Taps

Les Network Taps sont un implant physique dans un cable. C'est utilsé fréquement par les équipes DFIR (Digital Forensics and Incident Response) et les red teams pour récupérer les packets

La première façon est de le faire en utilisant un hardwardre pour intercepter le traffic (Vampire tap) ex :

image::https://i.pinimg.com/originals/8e/ab/21/8eab2161bb612c7d1f2423fb881b9575.gif[Vampire_tap]

Une autre option est de mettre un network tap et faire étappe du réseau. Le tap réplique les packets lorsqu'il passe par ce dernier 

image::https://cdn.shopify.com/s/files/1/0068/2142/products/P1090928_600x.jpg[Network_tap]

### Mac Flood

CAM : https://www.easytechjunkie.com/what-is-a-cam-table.htm

Les Mac Flood sont une autre techniques pour "sniff" (aspirer/intercepter) les packets. Mac Flooding est le fait de stressser un switch et de remplir la  CAM TAble ((Content Addressable Memory). Quand la table est rempli, le switch n'accepte plus de nouvelle Mac Adresse and donc pour garder le réseau envie, le switch envoie tous les packets à Tous les ports du switch.

Cela fait une forte pression sur l'équipement et donc est à éviter.

### ARP Poisoning

C'est une autre equipe qui est de rediriger le traffic vers la machione qui surveille le traffic. 

## Filtering

Filtrer les packets est très improtant dans l'analyse surtout quand i ly en a beaucoup. dans Wireshark, il y a les capture filters qui sont disponibles quand on choisit une interface, mais il existe aussi les display filters qui permettent d'afficher eux qu'on va. On peut les utiliser dans l'analyze tab e dans la barre de filtre)

Il y a plusieurs opérateurs pour la syntaxe :

* and operator : and / &&
* or operator: or / ||
* equals operator: eq / ==
* not equal: ne / !=
* greater than : gt / >
* less than: lt / <
<

Cela permet de mettre des filtres comme ceci :

ip.addr == <IP Address>

On peut aussi filtrer par source ou destination avec: ip.src & ip.ds ou même par port : tcp.port ou même par protocle (en écrivant juste tcp/udp/adr/xml/...)

## Analysis

### Packets Dissections

Wireshark utilise le model OSI pour diviser les packets:

image::https://i.imgur.com/r4SjjLc.png[Rappel_Osi]

Pour avoir les détails d'un packet, il suffit de double click dessus et on a une liste d'éléments (Layer 1 à 5)

* Frame (Layer 1: Physical) Cela permet de voir les détails du layer physique (temps d'arrivé, frame number, encapsulation, Interface, etc)
* Source (Layer 2 : Data Link) Cela permet de savoir les Mac Adresse de la source et de la destination.
* Internet Protocole (Layer 3: Network) Cela permet de connaitre les adresses IP
* Protocole (Layer 4: transport) Cela permet de connaitre le protoccole TCP/UDP, le Port, la sequence, longueur, les flags (assez riche)
** Il peut aussi intégrer le protocole error
* HyperText Transfer Protocle (Layer 5: Session) Cela permet de voir le protocole utilisé (HTTP/FTP/SMB/...)
** Application data: Extension du layer 5

### ARP Traffic

l'ARP (Adresse resolution Protocol) est un protocole Layer 2 ( Data Link) qui contient les request et response message. LE header contient un des 2 codes pour identifier ces packets, on trouve ces codes dans l'adresse resolution protoocle qui est à la place de l'internet procole

* Request (1)
* Reply (2)

En général, le traffic a une source identifiable (sinon suspect) et on peut activier le link dans Vue=> Name Resolutio net cheke ou non et on peut souvent récupérer les adresses MAc à partir d'un packet ARP :

image::https://i.imgur.com/qnZyTVB.png[Main_Info]

Pour récupérer une valeur, clic droit => Copier => Valeur

### ICMP Traffic

L'internet Control Message protocole est utilisé pour analyser les nodes d'un network (surtout pour les pings et les traceroute). Il y a plusieurs trucs à savoir sur les informations:

* Type: 8 = request & 0 = reply
* timestamp est utile pour voir les comportement suspect aussi (basé sur la timezone du pc)

### TCP Traffic

Transmission Control Ptrocole s'occupe de délivrer des packets en prenant en compte le sequençage et les erreurs. Une manière de voir les activité suspect est de regarder si le handshake est executé correctement et dans le bon ordre ou si cela inclus d'autres packets (ex RST packet)

Oh recupere les sequences numbers et l'acknowledgmeent number. Si l'ACK est à 0 c'est que la requete a pas été fini (Port fermé dans un scan NMAP par exemple). Il faut regarder à l'ensemble des packets pour comprendre ce qui se passe et pas à un en détail

### DNS Traffic
