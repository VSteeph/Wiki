# Bash

Bash est un langage de scripting qui marche sur la plupart des distrib Linux et MacOS. Il s'execute à partir du shell et se trouve dans les shell scripts (.sh).

Pour se lancer, il doit pointer vers le shell, c'est à dire toujours avoir cette ligne en entête.

```Bash
#!/bin/bash
```

On peut y mettre toutes les commandes de l'OS + celle du langage

## Lancer le fichier

Pour executer le fichier, il faut que cela soit un fichier .sh avec l'entête. Il faut avoir les droits d'execution (chmod +x filename) et lancer le fichier comme ceci ./filename

## Programmation

### Variables

Elles se déclarent sans aucun espace sinon le nom de la variable est assimilée à une commande :

name="Jimmy" et on les appelle avec le signe $ (comme en PHP), exemple echo $name (ou echo "Bonjour $name")

On peut aussi créer des arrays comme ceci:

fruits=('apple' 'banana' 'orange' 'peach') et on peut récupérer un élément spécifique avec ${fruits[2]} ou tous avec ${fruits[@]}

on peut aussi ajouter/remplacer/enlever des elements:

unset fruits[1] enleve la valeur 1
fruits[1]='BigApple' ajoute une valeur

Le tableau n'est pas de taille fixe ET peut avoir des éléments null

### Parametres

On peut aussi faire passer des parametres au script depuis son appel :

./file.sh Jimmy 21 france

cela passe 3 paramètres qu'on apppelle avec $x ($1, $2, $3),On recupere le nombre d'arguments avec $# et cela commence à $0 qui est par défaut le nom du script
ex :
name=$1

On peut aussi récupérer les inputs de l'utilisateurs avec des commandes comme "read" ex 

```Bash
#!/bin/bash

read name
echo "Bonjour $name"
```

### Conditionals


### Debugging

On peut facilement débugger un script shell avec l'ajout de set -x et set +x autour du bloc qu'on veut debugger. Chaque commande sera mis avant son output pour que le développeur puisse facilement voir qu'est ce qui appelle quoi. Chaque commande aura un signe + (réussite) ou -(erreur) au début sa ligne.

Pour appeler le débuggage, on utilise cette commande :

bash -x ./file.sh

```Bash
#!/bin/bash

set -x
name="Jimmy"
echo $name
set +x
```
